name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 깃허브 리포지토리의 소스 코드를 가져옴
      - name: Checkout
        uses: actions/checkout@v3

      # 자바 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # applicaion.yml 파일의 환경 변수에 값 대입
      - name: Set Yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.DATASOURCE_URL }}
          spring.datasource.username: ${{ secrets.DATASOURCE_USERNAME }}
          spring.datasource.password: ${{ secrets.DATASOURCE_PASSWORD }}
          jwt.secret: ${{ secrets.JWT_SECRET }}

      # 빌드 권한 설정 및 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

  push-to-dockerhub:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 도커 이미지 빌드
      - name: Build Docker image
        run: docker build -t olsohee/funfit_community:latest .

      # 도커 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 도커 허브에 push
      - name: Push Docker image to Docker Hub
        run: docker push olsohee/funfit_community:latest

  deploy:
    needs: push-to-dockerhub
    runs-on: ubuntu-latest

    steps:
      # EC2 접속 후 도커 허브의 이미지 pull 및 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker stop $(docker ps -a -q) 
            docker rm $(docker ps -aq)
            docker pull ${{ secrets.DOCKER_USERNAME }}/funfit_community:latest
            docker-compose up --build -d
